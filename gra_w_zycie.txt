<!DOCTYPE html>
<html lang="pl">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta charset="UTF-8">
<meta name="keywords" content="projekty, Python, Java, Gra w życie, ekosystem, symulacje, programowanie, Vladyslav Dovhopiatyi">
<meta name="description" content="Poznaj symulację 'Gra w życie' Johna Conwaya – fascynujący projekt w Pythonie pokazujący zasady ewolucji komórkowej">
<meta name="author" content="Vladyslav Dovhopiatyi">
<title>Gra w życie Conwaya – Symulacja w Pythonie</title>
<!-- <link rel="icon" type="image/svg+xml" href="favicon.svg"> -->
<link rel="icon" type="image/png" href="favicon.png">

<style>

* {box-sizing: border-box;} 

@keyframes colorchange {
0% {background-color: #ffffff;}
20% {background-color: #ccffcc;}
40% {background-color: #ffffff;}
60% {background-color: #ccffff;}
80% {background-color: #ffffff;}
100% {background-color: #ccccff;}
}

body {
margin-top: 90px;
animation: colorchange 60s infinite;
}

header {
position: fixed;
top:0; left:0; right:0;
z-index: 1000;
background-color: #0040ff;
padding: 10px;
display: flex;
justify-content: space-between;
max-height: 100px;
}

.szukaj-container {	
max-width: 250px;
margin: 10px auto
}

#google_search {
width: 200%;
padding: 10px 10px 10px 15px;
border: 1px solid black;
border-radius: 25px;
}

.autocomplete-item {
background-color: white;
border: 1px solid #d4d4d4;
cursor: pointer;
padding: 10px;
width: 200%;
}

.autocomplete-item:hover {
background-color: #e9e9e9;
}

.autocomplete-active {
background-color: #d4d4d4;
}

.nav1 {
position: fixed;
top: 70px;
left: 0;
width: 20%;
height: 100%; 
background-color: rgb(0, 162, 255);
padding: 20px;
}

.nav1 a {
display: block;
padding: 10px 20px;
text-decoration: none;
color: black;
}

.nav1 a:hover {
background-color: hsl(280, 100%, 70%)
}

.headers {
text-align:center;
margin-left: 25%;
width: 75%;
}
p {
text-align:center;
margin-left: 25%;
font-size: 120%;
line-height: 1.6;
}

@keyframes bounce {
0%, 100% { transform: translateY(0); }
50% { transform: translateY(10px); }
}

.style_code {
background-color: #f2f2f2;
border-radius: 10px;
font-size: 14px;
line-height: 1.5;
border: 2px solid rgb(128, 128, 128);
margin-left: 25%;
padding: 10px;
display: block;
overflow-x: auto;
}

.button_container {
text-align: center;
margin-left: 25%;
width: 75%;
}

a.button-link {
text-align:center;
border-radius: 25px;
background-color:#cc66ff;
color:white;
padding: 15px 25px;
text-decoration: none;
display: inline-block;
margin: 5px;
}
a.button-link:hover {
background-color: #d32f2f;
}

.square_container {
display: flex;
flex-wrap: wrap;
justify-content: center;
margin-left: 25%;
width: 75%;
gap: 20px;
margin-top: 30px;
}

.square {
background-color:#ffffff;
border-radius: 15px;
padding: 20px;
width: 100%;
box-shadow: 10px 10px 1px #ccccff;
transition: transform 0.5s;
display: flex;
align-items: center;
min-height: 200px; 
}

.square p {
text-align: left;
margin: 0;
line-height: 2;
}

@media (max-width: 768px) {

.szukaj-container {
max-width: 100%;
width: 250px;
margin: 10px auto;
}

#google_search {
width: 100%;
padding: 10px 15px;
border: 1px solid black;
border-radius: 25px;
box-sizing: border-box;
}

.nav1 {
width: 250px;
left: -260px;
transition: left 0.3s ease;
padding-top: 60px;
}

.nav1.active {
left: 0;
}

#toggleNav {
position: fixed;
top: 82px;
left: 0px;
z-index: 1100;
font-size: 20px;
background: #669999;
color: white;
border: 3px solid black;
padding: 8px 12px;
cursor: pointer;
display: block;
}

#toggleNav.hidden {
display: none;
}

header {
display: flex;
flex-wrap: wrap; 
align-items: center;
justify-content: space-between;
}

h1, p, .square_container, .button_container {
margin-left: 0;
width: 100%;
padding: 10px;
}

.headers {
text-align: center;
padding: 10px;
width: 100%;
}

p {
text-align: center;
padding: 10px;
font-size: 120%;
width: 100%;
}

.square {
padding: 10px;
font-size: 100%;
}

.style_code {
font-size: 12px;
padding: 10px;
margin: 0;
width: 100%;
}

.headers, p, .button_container {
padding: 10px;
margin-left: 0;
width: 100%;
}
  
.square, .headers, .style_code {
max-width: 900px;
margin: auto;
}

.square_container {
display: flex;
flex-wrap: wrap;
justify-content: center;
padding: 10px;
gap: 20px;
margin-left: 0;
width: 100%;
}
.square {
width: 100%;
}
}

</style>

</head>
<body>

<button id="toggleNav" class="hidden" aria-label="Menu">☰</button>

<header>

<a href="omnie.html">
<img src="favi.jpg" alt="Logo strony" width="50" height="50">
</a>

<div class="szukaj-container">
<input id="google_search" type="text" placeholder="Wyszukiwarka projektów" autocomplete="off" oninput="obsługa_wyszukiwarki()" aria-label="Wyszukiwarka projektów">
<div id="autocomplete-list" class="autocomplete-items" style="max-width: 250px; margin-top: 5px;"></div>
</div>

</header>

<nav class="nav1">
<a href="index.html">Python: co to?</a>
<a href="gra_w_zycie.html">Gra w życie</a>
<a href="symulacja_ekosystemy.html">Symulacja ekosystemy</a>
<a href="zhoska_bitwa.html">Zhoska bitwa</a>
<a href="omnie.html">O mnie</a>

</nav>

<main>

<script src="wyszukiwarka_script.js"></script>

<h1 class="headers">Gra W Życie</h1>

<div class="square_container">
<div class="square">

<p>Nie jest tajemnicą, że w internecie można znaleźć wiele projektów dotyczących „Gry w życie”. Na tej stronie chciałbym zaprezentować moją własną wersję projektu, którą zrealizowałem w ramach zadania od wykładowcy na uczelni. Projekt tworzy kwadratową planszę, na której pojawiają się komórki mogące przemieszczać się po obszarze, zmieniać swój stan, z żywego na martwy, oraz wykonywać określone działania, takie jak rozmnażanie się lub umieranie. Wszystko zależy od liczby sąsiadujących komórek.</p>

</div>
</div>

<br><p style="color:#cc0000;"><strong>&#128187; Pełny kod znajdziesz na końcu tej strony. &#128187; </strong></p>

<p style="font-size: 250%; color:#cc0000; animation: bounce 1.5s infinite;"><b>&#x2B07; &#x2B07; &#x2B07;</b></p>

<div class="button_container">
<a href="#projekt_kon" class="button-link"><b>Gra w życie</b></a>
</div>
<br>
<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Imports</h2>


<pre><code class="style_code">
import sys
import random
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QGraphicsScene, QGraphicsView, QGraphicsRectItem, QLabel
from PyQt5.QtCore import Qt, QTimer
</code></pre>

<div class="square_container">
<div class="square">

<p><b style="color:#e65c00">import</b> <b>sys</b> &mdash; moduł umożliwiający pracę z funkcjami systemowymi.<br>

<b style="color:#e65c00">import</b> <b>random</b> &mdash; moduł do generowania losowych liczb i losowego wyboru elementów.<br>

<b style="color:#e65c00">from</b> <b>PyQt5.QtWidgets</b> <b style="color:#e65c00">import</b> <b>QApplication, QWidget, QVBoxLayout, QGraphicsScene, QGraphicsView, QGraphicsRectItem, QLabel</b> &mdash; Ten wiersz importuje klasy z biblioteki PyQt5, potrzebne do tworzenia interfejsu graficznego — do okna aplikacji, rozmieszczania elementów, rysowania grafiki i wyświetlania tekstu.<br>

<b style="color:#e65c00">from</b> <b>PyQt5.QtCore</b> <b style="color:#e65c00">import</b> <b>Qt, QTimer</b> &mdash; importuje klasy z PyQt5 do tworzenia GUI: okna, układu, grafiki i timerów.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Plansza</h2>

<pre><code class="style_code">
class Plansza:
    _instancja = None
    SZEROKOSC = 20
    WYSOKOSC = 20
</code></pre>

<div class="square_container">
<div class="square">

<p>Na górze to początek kodu, w którym tworzona jest jedna z głównych klas — <b style="color:#cc0000">Plansza</b>, reprezentująca całe pole gry. Zmienna <b>_instancja</b> służy do implementacji wzorca Singleton, który gwarantuje, że zostanie utworzona tylko jedna instancja planszy. Zmienne <b>SZEROKOSC i WYSOKOSC</b> określają szerokość i wysokość planszy (20 na 20 komórek).</p>

</div>
</div>
<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Definicji funkcji planszy</h2>

<pre><code class="style_code">
    def __new__(cls, szerokosc=10, wysokosc=10):
        if cls._instancja is None:
            cls._instancja = super(Plansza, cls).__new__(cls)
            cls._instancja.szerokosc = szerokosc
            cls._instancja.wysokosc = wysokosc
            cls._instancja.komorki = [[FabrykaKomorek.utworz_komorke("martwa") for _ in range(szerokosc)] for _ in range(wysokosc)]
        return cls._instancja
</code></pre>

<div class="square_container">
<div class="square">

<p>Ta funkcja odpowiada za tworzenie nowego obiektu klasy Plansza. Metoda sprawdza, czy obiekt <b>_instancja</b> już istnieje; jeśli nie, tworzy nowy obiekt, ustawia jego rozmiary (szerokosc, wysokosc) i na początku ustawia wszystkie komórki jako martwe. Przy kolejnych wywołaniach <b style="color:#cc0000";>Plansza()</b> metoda po prostu zwraca wcześniej utworzoną <b>_instancja</b>, nie tworząc nowego obiektu.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<pre><code class="style_code">
    def ustaw_komorke(self, x, y, komorka):
        if 0 &lt;= x &lt; self.szerokosc and 0 &lt;= y &lt; self.wysokosc:
            self.komorki[y][x] = komorka
</code></pre>

<div class="square_container">
<div class="square">

<p>Ta metoda odpowiada za ustawienie konkretnej komórki na planszy. Przyjmuje współrzędne <b>x</b> (poziomo) i <b>y</b> (pionowo) oraz obiekt komórki <b>komorka</b>. Najpierw metoda sprawdza, czy współrzędne mieszczą się w granicach planszy — jeśli tak, zamienia komórkę na wskazanych współrzędnych na nową, przekazaną jako argument. Jeśli współrzędne są poza granicami, metoda nie wykonuje żadnej operacji.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<pre><code class="style_code">
    def pobierz_komorke(self, x, y):
        if 0 &lt;= x &lt; self.szerokosc and 0 &lt;= y &lt; self.wysokosc:
            return self.komorki[y][x]
        else:
            return FabrykaKomorek.utworz_komorke("martwa")
</code></pre>

<div class="square_container">
<div class="square">

<p>Metoda <b>pobierz_komorke</b> odpowiada za zwrócenie komórki z planszy gry na podstawie podanych współrzędnych x (poziomo) i y (pionowo).<strong>Jak działa:</strong><br> Najpierw sprawdza, czy współrzędne x i y mieszczą się w granicach planszy (od 0 do szerokości i wysokości odpowiednio).<br> Jeśli współrzędne są poprawne — zwraca komórkę z odpowiedniej pozycji na planszy. Jeśli współrzędne wychodzą poza granice planszy — zwraca nową martwą komórkę, utworzoną za pomocą fabryki <b><mark>FabrykaKomorek</mark></b>.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Komórka</h2>

<pre><code class="style_code">
class Komorka:
    def __init__(self, zywa=False):
        self.zywa = zywa

    def zmien_stan(self, stan):
        self.zywa = stan
</code></pre>

<div class="square_container">
<div class="square">

<p>Na początku konstruktor klasy <b>Komorka</b> określa, czy komórka jest żywa (True), czy martwa (False). Domyślnie tworzona jest jako martwa. Metoda <b>zmien_stan</b> umożliwia zmianę stanu komórki &mdash; aktualizuje właściwość <b>self.zywa</b>, przypisując jej nową wartość: <b>True</b> (żywa) lub <b>False</b> (martwa). Klasy dziedziczące po klasie Komórka znajdziesz poniżej.</p>

</div>
</div>

<h2 class="headers">Klasy dziedziczące po Komórce</h2>

<pre><code class="style_code">
class ZywaKomorka(Komorka):
    def __init__(self):
        super().__init__(True)

class MartwaKomorka(Komorka):
    def __init__(self):
        super().__init__(False)
</code></pre>

<div class="square_container">
<div class="square">

<p><b style="color:#33cc33">class ZywaKomorka(Komorka)</b> &mdash; klasa dziedzicząca po <b>Komorka</b>, która zawsze tworzy żywą komórkę. Dzięki <b>super().__init__(True)</b> przekazuje wartość <b>True</b> do klasy bazowej, co oznacza, że taka komórka jest automatycznie żywa. <b style="color:#ff0000">class MartwaKomorka(Komorka)</b> &mdash; klasa dziedzicząca po <b>Komorka</b>, która zawsze tworzy martwą komórkę. Używa <b>super().__init__(False)</b>, aby ustawić początkowy stan jako martwy.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers"><mark>FabrykaKomorek</mark></h2>

<pre><code class="style_code">
class FabrykaKomorek:
    @staticmethod
    def utworz_komorke(typ):
        if typ == "zywa":
            return  ZywaKomorka()
        else:
            return  MartwaKomorka()
</code></pre>

<div class="square_container">
<div class="square">

<p>Ta klasa używa funkcji <b>def utworz_komorke(typ)</b>, aby stworzyć żywą lub martwą komórkę w zależności od przekazanego parametru <b>typ</b>. Jeśli typ jest równy "zywa", funkcja zwraca obiekt żywej komórki <b>(ZywaKomorka)</b>, w przeciwnym razie — martwej komórki <b>(MartwaKomorka)</b>. Metoda jest oznaczona jako statyczna <b style="color:#ffff00">(@staticmethod)</b>, więc można ją wywołać bez tworzenia instancji klasy <b>FabrykaKomorek</b>.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Obserwator</h2>

<pre><code class="style_code">
class Obserwator:
    def aktualizuj(self, plansza):
        pass
</code></pre>

<div class="square_container">
<div class="square">

<p>To jest klasa bazowa (ojciec), po której dziedziczą inne klasy. Zawiera metodę <b>aktualizuj(self, plansza)</b>, która obecnie nic nie robi (pass), ale służy jako interfejs do aktualizacji stanu. Dzięki tej metodzie podklasy mogą zaimplementować własną logikę obserwacji stanu obiektu plansza i odpowiednio aktualizować swoje dane lub interfejs.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">GUI</h2>

<p style=" background-color: #ffff00;">GUI &mdash; to Graphical User Interface, czyli po polsku &mdash; graficzny interfejs użytkownika</p>

<pre><code class="style_code">
class GUIWidok(Obserwator):
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.window = QWidget()
        self.layout = QVBoxLayout(self.window)
        self.label = QLabel("Gra w Życie", self.window)
        self.layout.addWidget(self.label)
        self.scene = QGraphicsScene()
        self.view = QGraphicsView(self.scene, self.window)
        self.layout.addWidget(self.view)
        self.window.setLayout(self.layout)
        self.window.setWindowTitle("Gra w Życie")
        self.window.show()
</code></pre>

<div class="square_container">
<div class="square">

<table style="width: 100%; border-collapse: collapse;" border="3" cellpadding="10">
<caption style="font-size: 150%; margin-bottom: 10px;"><b>GUIWidok</b></caption>
<tr style="background-color: #ff0000; color: white;">
<th>Kod</th>
<th>Za co odpowiada</th>
</tr>
<tr>
<td>self.app = QApplication(sys.argv)</td>
<td>Tworzenie aplikacji PyQt</td>
</tr>
<tr>
<td>self.window = QWidget()</td>
<td>Główne okno aplikacji</td>
</tr>
<tr>
<td>self.layout = QVBoxLayout(self.window)</td>
<td>Pionowe rozmieszczenie elementów w oknie</td>
</tr>
<tr>
<td>self.label = QLabel("Gra w Życie", self.window)</td>
<td>Tekstowy napis z nazwą gry</td>
</tr>
<tr>
<td>self.scene = QGraphicsScene()</td>
<td>Scena dla obiektów graficznych</td>
</tr>
<tr>
<td>self.view = QGraphicsView(self.scene, self.window)</td>
<td>Widżet do podglądu sceny</td>
</tr>
<tr>
<td>self.window.show()</td>
<td>Wyświetlenie okna użytkownikowi</td>
</tr>
</table>

</div>
</div>

<h2 class="headers">Aktualizacja GUI</h2>

<pre><code class="style_code">
    def aktualizuj(self, plansza):
        self.scene.clear()
        szerokosc = 20
        wysokosc = 20
        for y in range(plansza.wysokosc):
            for x in range(plansza.szerokosc):
                komorka = plansza.pobierz_komorke(x, y)
                if komorka.zywa:
                    params = QGraphicsRectItem(x * szerokosc, y * wysokosc, szerokosc, wysokosc)
                    params.setBrush(Qt.blue)
                    self.scene.addItem(params)
                else:
                    params = QGraphicsRectItem(x * szerokosc, y * wysokosc, szerokosc, wysokosc)
                    params.setBrush(Qt.white)
                    self.scene.addItem(params)
</code></pre>

<div class="square_container">
<div class="square">

<p>W tym fragmencie kodu następuje aktualizacja graficznego interfejsu użytkownika <b>(GUI)</b>. Na początku scena jest czyszczona za pomocą <b>self.scene.clear()</b>, a następnie ustalana jest wielkość komórek — po 20 pikseli wysokości i szerokości. Dwie pętle <b>(for y ..., for x ...)</b> przechodzą przez wszystkie współrzędne planszy. Dla każdej komórki pobierany jest jej stan, tworzony jest prostokąt i dodawany do sceny: żywe komórki są wypełniane na niebiesko, martwe — na biało.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Symulacja gry</h2>

<pre><code class="style_code">
class Symulacja:
    def __init__(self, plansza, obserwator):
        self.plansza = plansza
        self.obserwator = obserwator
</code></pre>

<div class="square_container">
<div class="square">

<p>Do konstruktora przekazywane są dwa parametry: <b>plansza</b> – obiekt reprezentujący planszę gry (tablicę komórek) oraz <b>obserwator</b> – obiekt, który będzie obserwował zmiany na planszy, zazwyczaj jest to interfejs graficzny. Parametry przekazane do konstruktora są przechowywane jako atrybuty klasy <b>(self.plansza i self.obserwator)</b>, aby można było z nich korzystać w innych metodach klasy. Pozwala to symulacji na dostęp do aktualnego stanu planszy oraz informowanie interfejsu graficznego o konieczności aktualizacji widoku.</p>

</div>
</div>

<h2 class="headers">Metoda licząca sąsiadów</h2>

<pre><code class="style_code">
    def policz_sasiadow(self, x, y):
        return sum(
            self.plansza.pobierz_komorke(x+ delta_x, y + delta_y).zywa
            for delta_x in range(-1, 2)
            for delta_y in range(-1, 2)
            if not (delta_x == 0 and delta_y == 0)
        )
</code></pre>

<div class="square_container">
<div class="square">

<p>Metoda <b>policz_sasiadow</b> zlicza, ile żywych sąsiednich komórek ma komórka znajdująca się na pozycji (x, y). Sprawdza wszystkie sąsiednie komórki wokół tej pozycji — w poziomie, pionie oraz na przekątnych (łącznie 8 sąsiadów). Dla każdej sąsiedniej komórki o współrzędnych <b>(x + delta_x, y + delta_y)</b> metoda wywołuje <b>pobierz_komorke</b> klasy <b>plansza</b>, aby uzyskać obiekt komórki. Następnie odwołuje się do jej atrybutu <b>.zywa</b>, który zawiera wartość logiczną: <span style="color:#ff6600">True</span>, jeśli komórka jest żywa, oraz <span style="color:#ff6600">False</span>, jeśli martwa. Pętle <b>for delta_x</b> i <b>for delta_y</b> przechodzą przez wszystkie sąsiednie pozycje w obrębie jednego kroku od (x, y). Warunek <b>if not (delta_x == 0 and delta_y == 0)</b> wyklucza samą komórkę (x, y), aby nie była uwzględniana w liczeniu sąsiadów. W rezultacie metoda zwraca liczbę żywych sąsiednich komórek.</p>

</div>
</div>

<h2 class="headers">Aktualizacja stanu planszy</h2>

<pre><code class="style_code">
    def aktualizuj(self):							# Metoda aktualizuje stan całej gry (planszy)
        nowe_stany = []								# Tworzymy pustą listę do przechowywania nowych stanów komórek
        for y in range(self.plansza.wysokosc):					# Przechodzimy przez wszystkie wiersze planszy (oś Y)
            wiersz = []								# Tworzymy pustą listę do przechowywania stanów komórek w jednym wierszu
            for x in range(self.plansza.szerokosc):				# Przechodzimy przez wszystkie kolumny w bieżącym wierszu (oś X)
                komorka = self.plansza.pobierz_komorke(x, y)			# Pobieramy obiekt komórki o współrzędnych (x, y)
                sasiedzi = self.policz_sasiadow(x, y)				# Liczymy ilu żywych sąsiadów ma ta komórka
                if komorka.zywa:
                    if sasiedzi &lt; 2 or sasiedzi &gt; 3:
                        wiersz.append(False)					# umiera
                    else:
                        wiersz.append(True) 					# żyje
                else:
                    if sasiedzi == 3:
                        wiersz.append(True) 					# rodzi się
                    else:
                        wiersz.append(False) 					# martwa
            nowe_stany.append(wiersz)						# Dodajemy gotowy wiersz stanów do głównej listy


        for y in range(self.plansza.wysokosc):					# Ponownie przechodzimy przez wszystkie wiersze
            for x in range(self.plansza.szerokosc):				# I przez wszystkie kolumny
                self.plansza.komorki[y][x].zmien_stan(nowe_stany[y][x])		# Aktualizujemy stan każdej komórki zgodnie z nową listą

        self.obserwator.aktualizuj(self.plansza)				# Informujemy obserwatora, aby zaktualizował wyświetlanie planszy
</code></pre>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">MAIN &mdash; kod startowy programu</h2>

<pre><code class="style_code">
if __name__ == "__main__":
    plansza = Plansza(Plansza.SZEROKOSC, Plansza.WYSOKOSC)

    for x in range(plansza.szerokosc):
        for y in range(plansza.wysokosc):
            if random.random() &gt; 0.5:
                plansza.ustaw_komorke(x,y,FabrykaKomorek.utworz_komorke(&quot;zywa&quot;))
</code></pre>

<div class="square_container">
<div class="square">

<p>Ten fragment kodu uruchamia się tylko wtedy, gdy skrypt jest wywoływany bezpośrednio (nie jako moduł importowany). Tworzy instancję planszy o określonych wymiarach (szerokość i wysokość).Następnie, dla każdej komórki na planszy, losowo decyduje, czy komórka będzie żywa, przy czym prawdopodobieństwo życia wynosi 50%.
W ten sposób inicjalizuje początkowy stan gry, przygotowując planszę do dalszej symulacji.</p>

</div>
</div>

<hr style="border: none; height: 10px; background-color: #cc00cc; margin: 20px 0;">

<h2 class="headers">Inicjalizacja i uruchomienie symulacji graficznej</h2>

<pre><code class="style_code">
    widok = GUIWidok()
    symulacja = Symulacja(plansza, widok)
    timer = QTimer()
    timer.timeout.connect(lambda: symulacja.aktualizuj())
    symulacja.aktualizuj()
    timer.start(100)
    widok.window.setGeometry(100, 100, 500, 500)
    sys.exit(widok.app.exec_())
</code></pre>

<div class="square_container">
<div class="square">

<table style="width: 100%; border-collapse: collapse;" border="3" cellpadding="10">
<tr style="background-color: #ff0000; color: white;">
<th>Kod</th>
<th>Opis</th>
</tr>
<tr>
<td><code>widok = GUIWidok()</code></td>
<td>Tworzy obiekt widoku GUI, który będzie odpowiedzialny za wyświetlanie planszy.</td>
</tr>
<tr>
<td><code>symulacja = Symulacja(plansza, widok)</code></td>
<td>Inicjalizuje obiekt symulacji, przekazując do niego planszę oraz widok, aby symulacja mogła zarządzać stanem gry i aktualizować interfejs.</td>
</tr>
<tr>
<td><code>timer = QTimer()</code></td>
<td>Tworzy timer, który będzie wywoływał funkcję aktualizującą symulację co określony czas.</td>
</tr>
<tr>
<td><code>timer.timeout.connect(lambda: symulacja.aktualizuj())</code></td>
<td>Łączy sygnał timeout timera z metodą <code>aktualizuj</code> symulacji za pomocą wyrażenia lambda, aby symulacja była odświeżana cyklicznie.</td>
</tr>
<tr>
<td><code>symulacja.aktualizuj()</code></td>
<td>Wywołuje jednorazowo aktualizację symulacji, aby wyświetlić początkowy stan planszy.</td>
</tr>
<tr>
<td><code>timer.start(100)</code></td>
<td>Uruchamia timer z interwałem 100 milisekund, co powoduje regularne odświeżanie stanu gry i widoku.</td>
</tr>
<tr>
<td><code>widok.window.setGeometry(100, 100, 500, 500)</code></td>
<td>Ustawia rozmiar i pozycję okna GUI.</td>
</tr>
<tr>
<td><code>sys.exit(widok.app.exec_())</code></td>
<td>Na końcu uruchamia główną pętlę aplikacji PyQt5, która odpowiada za obsługę zdarzeń i wyświetlanie okna.</td>
</tr>
</table>

</div>
</div>

<h2 class="headers" id="projekt_kon"><b>Pełny kod "Gry w życie"</b></h2>

<div class="button_container">
<a href="gra_w_zycie.py" target="_blank" rel="noopener noreferrer" class="button-link" download="gra_w_zycie.py"><b>Pobierz</b></a>
</div>

<h1 class="headers">Projekty:</h1>

<div class="button_container">

<a href="symulacja_ekosystemy.html" target="_blank" rel="noopener noreferrer" class="button-link"><b>Symulacja ekosystemy</b></a>

<a href="zhoska_bitwa.html" target="_blank" rel="noopener noreferrer" class="button-link"><b>Zhoska bitwa</b></a>
</div>

</main>

<script>
  const nav = document.querySelector('.nav1');
  const toggleButton = document.getElementById('toggleNav');

  function isMobile() {
    return window.innerWidth <= 768;
  }

  function checkMobileMenu() {
    if (isMobile()) {
      toggleButton.classList.remove('hidden');
      nav.classList.add('hidden');
    } else {
      toggleButton.classList.add('hidden');
      nav.classList.remove('hidden');
      nav.classList.remove('active');
    }
  }

  toggleButton.addEventListener('click', () => {
    nav.classList.toggle('active');
  });

  window.addEventListener('resize', checkMobileMenu);
  window.addEventListener('load', checkMobileMenu);
</script>

<footer style="text-align:center; padding:20px; margin-top:50px; color:gray;">
  © 2025 Vladyslav Dovhopiatyi. Wszelkie prawa zastrzeżone.
</footer>


</body>
</html>
